#!/bin/bash
# ZIVPN UDP Server + Web UI (Myanmar)
# Author mix: Zahid Islam (udp-zivpn) + UPK tweaks + DEV-U PHOE KAUNT UI polish
# + Optional One-Time Key API integration (does not affect normal flow if unused)

set -euo pipefail

# ===== Pretty =====
B="\e[1;34m"; G="\e[1;32m"; Y="\e[1;33m"; R="\e[1;31m"; C="\e[1;36m"; M="\e[1;35m"; Z="\e[0m"
LINE="${B}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${Z}"
say(){ echo -e "$1"; }

echo -e "\n$LINE\n${G}üåü ZIVPN UDP Server + Web UI ·ÄÄ·Ä≠·ÄØ U PHOE KAUNT ·Äô·Äæ ·Äõ·Ä±·Ä∏·Äû·Ä¨·Ä∏·Äë·Ä¨·Ä∏·Äû·Ää·Ä∫${Z}\n$LINE"

# ===== Root check =====
if [ "$(id -u)" -ne 0 ]; then
  echo -e "${R}·Ä§ script ·ÄÄ·Ä≠·ÄØ root ·Ä°·Äñ·Äº·ÄÖ·Ä∫ ch·∫°y ·Äõ·Äï·Ä´·Äô·Äö·Ä∫ (sudo -i)${Z}"; exit 1
fi

# ===== üîë Optional: API key check (UI/website one-time key) =====
# Use when you want the installer to require a one-time key from your API UI
# - Set KEY_API to your API base URL (e.g. http://upkapi.upkvpn.site:8088)
# - Provide the token with --key=TOKEN or env INSTALL_KEY=TOKEN
# If KEY_API is empty, this block is skipped and install proceeds normally.
KEY_API="${KEY_API:-}"          # e.g. http://your-api:8088
INSTALL_KEY="${INSTALL_KEY:-}"
# parse CLI args: --key-api=..., --key=...
for arg in "$@"; do
  case "$arg" in
    --key-api=*) KEY_API="${arg#*=}";;
    --key=*) INSTALL_KEY="${arg#*=}";;
  esac
done
api_health() {
  curl -fsS "${KEY_API%/}/healthz" -m 5 >/dev/null 2>&1
}
api_validate() {
  local token="$1"
  # Avoid requiring jq here; do a tiny grep for "ok": true
  local resp
  resp="$(curl -fsS -H 'Content-Type: application/json' \
          -d "{\"key\":\"${token}\"}" \
          "${KEY_API%/}/api/validate" -m 10 || true)"
  echo "$resp" | grep -q '"ok"[[:space:]]*:[[:space:]]*true'
}
if [ -n "$KEY_API" ]; then
  echo -e "${Y}üîó KEY_API detected:${Z} $KEY_API"
  if ! api_health; then
    echo -e "${R}API health check ·Äô·Ä°·Ä±·Ä¨·ÄÑ·Ä∫·Äô·Äº·ÄÑ·Ä∫·Äï·Ä´ ‚Äî ${KEY_API}/healthz${Z}"
    echo -e "${R}API URL/port/proxy ·ÄÖ·ÄÖ·Ä∫·ÄÜ·Ä±·Ä∏·Äï·Ä´·Åã KEY_API ·Äô·Äû·Äê·Ä∫·Äô·Äæ·Äê·Ä∫·ÄÅ·Äª·ÄÑ·Ä∫·Äõ·ÄÑ·Ä∫ KEY_API ·ÄÄ·Ä≠·ÄØ ·Äô·Äë·Ää·Ä∑·Ä∫·Äï·Ä´·Äî·Ä≤·Ä∑·Åã${Z}"
    exit 1
  fi
  if [ -z "$INSTALL_KEY" ]; then
    echo -e "${R}--key=TOKEN (·Äû·Ä≠·ÄØ·Ä∑) INSTALL_KEY env ·Äô·Äë·Ää·Ä∑·Ä∫·Äõ·Äû·Ä±·Ä∏·Äï·Ä´ ‚Äî API ·Äû·ÄØ·Ä∂·Ä∏·Äô·Äö·Ä∫·ÄÜ·Ä≠·ÄØ·Äõ·ÄÑ·Ä∫ key ·Äú·Ä≠·ÄØ·Ä°·Äï·Ä∫·Äï·Ä´·Äê·Äö·Ä∫${Z}"
    exit 1
  fi
  echo -e "${Y}üîë Validating installer key...${Z}"
  if ! api_validate "$INSTALL_KEY"; then
    echo -e "${R}Installer key ·Äô·Äô·Äæ·Äî·Ä∫·Åä ·Äû·Ä≠·ÄØ·Ä∑·Äô·Äü·ÄØ·Äê·Ä∫ ·Äû·ÄÄ·Ä∫·Äê·Äô·Ä∫·Ä∏·Ä°·Äï·Äº·ÄÆ·Ä∏·Äû·Äê·Ä∫·Äû·ÄΩ·Ä¨·Ä∏·Äï·Äº·ÄÆ${Z}"
    exit 1
  fi
  echo -e "${G}‚úÖ Key OK ‚Äî install ·ÄÜ·ÄÄ·Ä∫·Äú·ÄØ·Äï·Ä∫·Äô·Äö·Ä∫${Z}"
fi
# ===== End optional API block =====

export DEBIAN_FRONTEND=noninteractive

# ===== apt guards =====
wait_for_apt() {
  echo -e "${Y}‚è≥ apt ·Äï·Ä≠·Äê·Ä∫·Äô·ÄÅ·Äª·ÄÑ·Ä∫·Ä∏ ·ÄÖ·Ä±·Ä¨·ÄÑ·Ä∑·Ä∫·Äî·Ä±·Äï·Ä´·Äê·Äö·Ä∫...${Z}"
  for _ in $(seq 1 60); do
    if pgrep -x apt-get >/dev/null || pgrep -x apt >/dev/null || pgrep -f 'apt.systemd.daily' >/dev/null || pgrep -x unattended-upgrade >/dev/null; then
      sleep 5
    else
      return 0
    fi
  done
  echo -e "${Y}‚ö†Ô∏è apt timers ·ÄÄ·Ä≠·ÄØ ·Äö·Ä¨·Äö·ÄÆ·Äõ·Äï·Ä∫·Äî·Ä±·Äï·Ä´·Äê·Äö·Ä∫${Z}"
  systemctl stop --now unattended-upgrades.service 2>/dev/null || true
  systemctl stop --now apt-daily.service apt-daily.timer 2>/dev/null || true
  systemctl stop --now apt-daily-upgrade.service apt-daily-upgrade.timer 2>/dev/null || true
}

apt_guard_start(){
  wait_for_apt
  CNF_CONF="/etc/apt/apt.conf.d/50command-not-found"
  if [ -f "$CNF_CONF" ]; then mv "$CNF_CONF" "${CNF_CONF}.disabled"; CNF_DISABLED=1; else CNF_DISABLED=0; fi
}
apt_guard_end(){
  dpkg --configure -a >/dev/null 2>&1 || true
  apt-get -f install -y >/dev/null 2>&1 || true
  if [ "${CNF_DISABLED:-0}" = "1" ] && [ -f "${CNF_CONF}.disabled" ]; then mv "${CNF_CONF}.disabled" "$CNF_CONF"; fi
}

# ===== Packages =====
say "${Y}üì¶ Packages ·Äê·ÄÑ·Ä∫·Äî·Ä±·Äï·Ä´·Äê·Äö·Ä∫...${Z}"
apt_guard_start
apt-get update -y -o APT::Update::Post-Invoke-Success::= -o APT::Update::Post-Invoke::= >/dev/null
apt-get install -y curl ufw jq python3 python3-flask python3-apt iproute2 conntrack ca-certificates >/dev/null || {
  apt-get install -y -o DPkg::Lock::Timeout=60 python3-apt >/dev/null || true
  apt-get install -y curl ufw jq python3 python3-flask iproute2 conntrack ca-certificates >/dev/null
}
apt_guard_end

# stop old services to avoid text busy
systemctl stop zivpn.service 2>/dev/null || true
systemctl stop zivpn-web.service 2>/dev/null || true

# ===== Paths =====
BIN="/usr/local/bin/zivpn"
CFG="/etc/zivpn/config.json"
USERS="/etc/zivpn/users.json"
ENVF="/etc/zivpn/web.env"
mkdir -p /etc/zivpn

# ===== Download ZIVPN binary =====
say "${Y}‚¨áÔ∏è ZIVPN binary ·ÄÄ·Ä≠·ÄØ ·Äí·Ä±·Ä´·ÄÑ·Ä∫·Ä∏·Äî·Ä±·Äï·Ä´·Äê·Äö·Ä∫...${Z}"
PRIMARY_URL="https://github.com/zahidbd2/udp-zivpn/releases/download/udp-zivpn_1.4.9/udp-zivpn-linux-amd64"
FALLBACK_URL="https://github.com/zahidbd2/udp-zivpn/releases/latest/download/udp-zivpn-linux-amd64"
TMP_BIN="$(mktemp)"
if ! curl -fsSL -o "$TMP_BIN" "$PRIMARY_URL"; then
  echo -e "${Y}Primary URL ·Äô·Äõ ‚Äî latest ·ÄÄ·Ä≠·ÄØ ·ÄÖ·Äô·Ä∫·Ä∏·Äï·Ä´·Äê·Äö·Ä∫...${Z}"
  curl -fSL -o "$TMP_BIN" "$FALLBACK_URL"
fi
install -m 0755 "$TMP_BIN" "$BIN"
rm -f "$TMP_BIN"

# ===== Base config =====
if [ ! -f "$CFG" ]; then
  say "${Y}üß© config.json ·Äñ·Äî·Ä∫·Äê·ÄÆ·Ä∏·Äî·Ä±·Äï·Ä´·Äê·Äö·Ä∫...${Z}"
  curl -fsSL -o "$CFG" "https://raw.githubusercontent.com/zahidbd2/udp-zivpn/main/config.json" || echo '{}' > "$CFG"
fi

# ===== Certs =====
if [ ! -f /etc/zivpn/zivpn.crt ] || [ ! -f /etc/zivpn/zivpn.key ]; then
  say "${Y}üîê SSL ·ÄÖ·Ä≠·Äê·Äª·Äñ·Ä≠·ÄØ·ÄÑ·Ä∫·Äê·ÄΩ·Ä± ·Äñ·Äî·Ä∫·Äê·ÄÆ·Ä∏·Äî·Ä±·Äï·Ä´·Äê·Äö·Ä∫...${Z}"
  openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 \
    -subj "/C=MM/ST=Yangon/L=Yangon/O=UPK/OU=Net/CN=zivpn" \
    -keyout "/etc/zivpn/zivpn.key" -out "/etc/zivpn/zivpn.crt" >/dev/null 2>&1
fi

# ===== Web Admin (Login UI credentials) =====
say "${Y}üîí Web Admin Login UI ·Äë·Ää·Ä∑·Ä∫·Äô·Äú·Ä¨·Ä∏? (·Äú·ÄÖ·Ä∫: ·Äô·Äñ·Ä≠·Äê·Ä∫)${Z}"
read -r -p "Web Admin Username (Enter=disable): " WEB_USER
if [ -n "${WEB_USER:-}" ]; then
  read -r -s -p "Web Admin Password: " WEB_PASS; echo
  if command -v openssl >/dev/null 2>&1; then
    WEB_SECRET="$(openssl rand -hex 32)"
  else
    WEB_SECRET="$(python3 - <<'PY'\nimport secrets;print(secrets.token_hex(32))\nPY\n)"
  fi
  {
    echo "WEB_ADMIN_USER=${WEB_USER}"
    echo "WEB_ADMIN_PASSWORD=${WEB_PASS}"
    echo "WEB_SECRET=${WEB_SECRET}"
  } > "$ENVF"
  chmod 600 "$ENVF"
  say "${G}‚úÖ Web login UI ·Äñ·ÄΩ·ÄÑ·Ä∑·Ä∫·Äë·Ä¨·Ä∏·Äï·Ä´·Äê·Äö·Ä∫${Z}"
else
  rm -f "$ENVF" 2>/dev/null || true
  say "${Y}‚ÑπÔ∏è Web login UI ·Äô·Äñ·ÄΩ·ÄÑ·Ä∑·Ä∫·Äë·Ä¨·Ä∏·Äï·Ä´ (dev mode)${Z}"
fi

# ===== Ask initial VPN passwords =====
say "${G}üîè VPN Password List (·ÄÄ·Ä±·Ä¨·Ä∫·Äô·Ä¨·Äñ·Äº·ÄÑ·Ä∑·Ä∫·ÄÅ·ÄΩ·Ä≤) eg: upkvip,alice,pass1${Z}"
read -r -p "Passwords (Enter=zi): " input_pw
if [ -z "${input_pw:-}" ]; then PW_LIST='["zi"]'; else
  PW_LIST=$(echo "$input_pw" | awk -F',' '{
    printf("["); for(i=1;i<=NF;i++){gsub(/^ *| *$/,"",$i); printf("%s\"%s\"", (i>1?",":""), $i)}; printf("]")
  }')
fi

# ===== Update config.json =====
if jq . >/dev/null 2>&1 <<<'{}'; then
  TMP=$(mktemp)
  jq --argjson pw "$PW_LIST" '
    .auth.mode = "passwords" |
    .auth.config = $pw |
    .listen = (."listen" // ":5667") |
    .cert = "/etc/zivpn/zivpn.crt" |
    .key  = "/etc/zivpn/zivpn.key" |
    .obfs = (."obfs" // "zivpn")
  ' "$CFG" > "$TMP" && mv "$TMP" "$CFG"
fi
[ -f "$USERS" ] || echo "[]" > "$USERS"
chmod 644 "$CFG" "$USERS"

# ===== systemd: ZIVPN =====
say "${Y}üß∞ systemd service (zivpn) ·ÄÄ·Ä≠·ÄØ ·Äû·ÄΩ·ÄÑ·Ä∫·Ä∏·Äî·Ä±·Äï·Ä´·Äê·Äö·Ä∫...${Z}"
cat >/etc/systemd/system/zivpn.service <<'EOF'
[Unit]
Description=ZIVPN UDP Server
After=network.target

[Service]
Type=simple
User=root
WorkingDirectory=/etc/zivpn
ExecStart=/usr/local/bin/zivpn server -c /etc/zivpn/config.json
Restart=always
RestartSec=3
Environment=ZIVPN_LOG_LEVEL=info
CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE CAP_NET_RAW
AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE CAP_NET_RAW
NoNewPrivileges=true

[Install]
WantedBy=multi-user.target
EOF

# ===== Web Panel (Flask) =====
say "${Y}üñ•Ô∏è Web Panel (Flask) ·ÄÄ·Ä≠·ÄØ ·Äë·Ää·Ä∑·Ä∫·Äî·Ä±·Äï·Ä´·Äê·Äö·Ä∫...${Z}"
cat >/etc/zivpn/web.py <<'PY'
# ... (UNCHANGED ‚Äì your full Flask web.py content stays here)
PY

# ===== Web systemd =====
cat >/etc/systemd/system/zivpn-web.service <<'EOF'
[Unit]
Description=ZIVPN Web Panel
After=network.target

[Service]
Type=simple
User=root
EnvironmentFile=-/etc/zivpn/web.env
ExecStart=/usr/bin/python3 /etc/zivpn/web.py
Restart=always
RestartSec=3

[Install]
WantedBy=multi-user.target
EOF

# ===== Networking: forwarding + DNAT + MASQ + UFW =====
echo -e "${Y}üåê UDP/DNAT + UFW + sysctl ·Ä°·Äï·Äº·Ää·Ä∑·Ä∫·ÄÅ·Äª·Äë·Ä¨·Ä∏·Äî·Ä±·Äï·Ä´·Äê·Äö·Ä∫...${Z}"
sysctl -w net.ipv4.ip_forward=1 >/dev/null
grep -q '^net.ipv4.ip_forward=1' /etc/sysctl.conf || echo 'net.ipv4.ip_forward=1' >> /etc/sysctl.conf
IFACE=$(ip -4 route ls | awk '/default/ {print $5; exit}')
[ -n "${IFACE:-}" ] || IFACE=eth0
iptables -t nat -C PREROUTING -i "$IFACE" -p udp --dport 6000:19999 -j DNAT --to-destination :5667 2>/dev/null || \
iptables -t nat -A PREROUTING -i "$IFACE" -p udp --dport 6000:19999 -j DNAT --to-destination :5667
iptables -t nat -C POSTROUTING -o "$IFACE" -j MASQUERADE 2>/dev/null || \
iptables -t nat -A POSTROUTING -o "$IFACE" -j MASQUERADE
ufw allow 5667/udp >/dev/null 2>&1 || true
ufw allow 6000:19999/udp >/dev/null 2>&1 || true
ufw allow 8080/tcp >/dev/null 2>&1 || true
ufw reload >/dev/null 2>&1 || true

# ===== CRLF sanitize =====
sed -i 's/\r$//' /etc/zivpn/web.py /etc/systemd/system/zivpn.service /etc/systemd/system/zivpn-web.service || true

# ===== Enable services =====
systemctl daemon-reload
systemctl enable --now zivpn.service
systemctl enable --now zivpn-web.service

IP=$(hostname -I | awk '{print $1}')
echo -e "\n$LINE\n${G}‚úÖ Done${Z}"
echo -e "${C}Web Panel   :${Z} ${Y}http://$IP:8080${Z}"
echo -e "${C}users.json  :${Z} ${Y}/etc/zivpn/users.json${Z}"
echo -e "${C}config.json :${Z} ${Y}/etc/zivpn/config.json${Z}"
echo -e "${C}Services    :${Z} ${Y}systemctl status|restart zivpn  ‚Ä¢  systemctl status|restart zivpn-web${Z}"
echo -e "$LINE"
